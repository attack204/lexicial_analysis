Source Code：
int main() {  //compilation
    int a = 1;
    int b = 2;
    bool c = true;
    if (a >= b) {
        c = false;
    } else {
        c = true;
    }
    float d = 1;
    while (b < 10) {
        d = d + 1;
    }
    return 0;
}

Lexical Analyse：
<INT> EndToken(type=6, my_type=INT, value="int")
<MAIN> EndToken(type=14, my_type=MAIN, value="main")
<XKH_L> EndToken(type=17, my_type=XKH_L, value="(")
<XKH_R> EndToken(type=18, my_type=XKH_R, value=")")
<DKH_L> EndToken(type=21, my_type=DKH_L, value="{")
<INT> EndToken(type=6, my_type=INT, value="int")
<ID> EndToken(type=0, my_type=ID, value="a")
<ASSIGN> EndToken(type=29, my_type=ASSIGN, value="=")
<INT_VALUE> EndToken(type=2, my_type=INT_VALUE, value="1")
<SEMICOLON> EndToken(type=23, my_type=SEMICOLON, value=";")
<INT> EndToken(type=6, my_type=INT, value="int")
<ID> EndToken(type=0, my_type=ID, value="b")
<ASSIGN> EndToken(type=29, my_type=ASSIGN, value="=")
<INT_VALUE> EndToken(type=2, my_type=INT_VALUE, value="2")
<SEMICOLON> EndToken(type=23, my_type=SEMICOLON, value=";")
<BOOL> EndToken(type=8, my_type=BOOL, value="bool")
<ID> EndToken(type=0, my_type=ID, value="c")
<ASSIGN> EndToken(type=29, my_type=ASSIGN, value="=")
<BOOL_VALUE> EndToken(type=4, my_type=BOOL_VALUE, value="true")
<SEMICOLON> EndToken(type=23, my_type=SEMICOLON, value=";")
<IF> EndToken(type=9, my_type=IF, value="if")
<XKH_L> EndToken(type=17, my_type=XKH_L, value="(")
<ID> EndToken(type=0, my_type=ID, value="a")
<GREATER_EQUAL> EndToken(type=30, my_type=GREATER_EQUAL, value=">=")
<ID> EndToken(type=0, my_type=ID, value="b")
<XKH_R> EndToken(type=18, my_type=XKH_R, value=")")
<DKH_L> EndToken(type=21, my_type=DKH_L, value="{")
<ID> EndToken(type=0, my_type=ID, value="c")
<ASSIGN> EndToken(type=29, my_type=ASSIGN, value="=")
<BOOL_VALUE> EndToken(type=4, my_type=BOOL_VALUE, value="false")
<SEMICOLON> EndToken(type=23, my_type=SEMICOLON, value=";")
<DKH_R> EndToken(type=22, my_type=DKH_R, value="}")
<ELSE> EndToken(type=10, my_type=ELSE, value="else")
<DKH_L> EndToken(type=21, my_type=DKH_L, value="{")
<ID> EndToken(type=0, my_type=ID, value="c")
<ASSIGN> EndToken(type=29, my_type=ASSIGN, value="=")
<BOOL_VALUE> EndToken(type=4, my_type=BOOL_VALUE, value="true")
<SEMICOLON> EndToken(type=23, my_type=SEMICOLON, value=";")
<DKH_R> EndToken(type=22, my_type=DKH_R, value="}")
<FLOAT> EndToken(type=5, my_type=FLOAT, value="float")
<ID> EndToken(type=0, my_type=ID, value="d")
<ASSIGN> EndToken(type=29, my_type=ASSIGN, value="=")
<INT_VALUE> EndToken(type=2, my_type=INT_VALUE, value="1")
<SEMICOLON> EndToken(type=23, my_type=SEMICOLON, value=";")
<WHILE> EndToken(type=11, my_type=WHILE, value="while")
<XKH_L> EndToken(type=17, my_type=XKH_L, value="(")
<ID> EndToken(type=0, my_type=ID, value="b")
<LESS> EndToken(type=33, my_type=LESS, value="<")
<INT_VALUE> EndToken(type=2, my_type=INT_VALUE, value="10")
<XKH_R> EndToken(type=18, my_type=XKH_R, value=")")
<DKH_L> EndToken(type=21, my_type=DKH_L, value="{")
<ID> EndToken(type=0, my_type=ID, value="d")
<ASSIGN> EndToken(type=29, my_type=ASSIGN, value="=")
<ID> EndToken(type=0, my_type=ID, value="d")
<ADD> EndToken(type=24, my_type=ADD, value="+")
<INT_VALUE> EndToken(type=2, my_type=INT_VALUE, value="1")
<SEMICOLON> EndToken(type=23, my_type=SEMICOLON, value=";")
<DKH_R> EndToken(type=22, my_type=DKH_R, value="}")
<RETURN> EndToken(type=15, my_type=RETURN, value="return")
<INT_VALUE> EndToken(type=2, my_type=INT_VALUE, value="0")
<SEMICOLON> EndToken(type=23, my_type=SEMICOLON, value=";")
<DKH_R> EndToken(type=22, my_type=DKH_R, value="}")
<END> EndToken(type=36, my_type=END, value=null)
Syntax Analyse：
INT 
T->INT 
T 
T MAIN 
N->MAIN 
T N 
T N XKH_L 
T N XKH_L XKH_R 
X->XKH_L XKH_R 
T N X 
T N X DKH_L 
T N X DKH_L INT 
T->INT 
T N X DKH_L T 
T N X DKH_L T ID 
T N X DKH_L T ID ASSIGN 
T N X DKH_L T ID ASSIGN INT_VALUE 
C->INT_VALUE 
T N X DKH_L T ID ASSIGN C 
V->C 
T N X DKH_L T ID ASSIGN V 
E->V 
T N X DKH_L T ID ASSIGN E 
T N X DKH_L T ID ASSIGN E SEMICOLON 
B->ID ASSIGN E SEMICOLON 
T N X DKH_L T B 
Z->T B 
T N X DKH_L Z 
Y->Z 
T N X DKH_L Y 
L->Y 
T N X DKH_L L 
T N X DKH_L L INT 
T->INT 
T N X DKH_L L T 
T N X DKH_L L T ID 
T N X DKH_L L T ID ASSIGN 
T N X DKH_L L T ID ASSIGN INT_VALUE 
C->INT_VALUE 
T N X DKH_L L T ID ASSIGN C 
V->C 
T N X DKH_L L T ID ASSIGN V 
E->V 
T N X DKH_L L T ID ASSIGN E 
T N X DKH_L L T ID ASSIGN E SEMICOLON 
B->ID ASSIGN E SEMICOLON 
T N X DKH_L L T B 
Z->T B 
T N X DKH_L L Z 
Y->Z 
T N X DKH_L L Y 
L->L Y 
T N X DKH_L L 
T N X DKH_L L BOOL 
T->BOOL 
T N X DKH_L L T 
T N X DKH_L L T ID 
T N X DKH_L L T ID ASSIGN 
T N X DKH_L L T ID ASSIGN BOOL_VALUE 
C->BOOL_VALUE 
T N X DKH_L L T ID ASSIGN C 
V->C 
T N X DKH_L L T ID ASSIGN V 
E->V 
T N X DKH_L L T ID ASSIGN E 
T N X DKH_L L T ID ASSIGN E SEMICOLON 
B->ID ASSIGN E SEMICOLON 
T N X DKH_L L T B 
Z->T B 
T N X DKH_L L Z 
Y->Z 
T N X DKH_L L Y 
L->L Y 
T N X DKH_L L 
T N X DKH_L L IF 
T N X DKH_L L IF XKH_L 
T N X DKH_L L IF XKH_L ID 
V->ID 
T N X DKH_L L IF XKH_L V 
T N X DKH_L L IF XKH_L V GREATER_EQUAL 
Q->GREATER_EQUAL 
T N X DKH_L L IF XKH_L V Q 
T N X DKH_L L IF XKH_L V Q ID 
V->ID 
T N X DKH_L L IF XKH_L V Q V 
P->V Q V 
T N X DKH_L L IF XKH_L P 
T N X DKH_L L IF XKH_L P XKH_R 
T N X DKH_L L IF XKH_L P XKH_R DKH_L 
T N X DKH_L L IF XKH_L P XKH_R DKH_L ID 
T N X DKH_L L IF XKH_L P XKH_R DKH_L ID ASSIGN 
T N X DKH_L L IF XKH_L P XKH_R DKH_L ID ASSIGN BOOL_VALUE 
C->BOOL_VALUE 
T N X DKH_L L IF XKH_L P XKH_R DKH_L ID ASSIGN C 
V->C 
T N X DKH_L L IF XKH_L P XKH_R DKH_L ID ASSIGN V 
E->V 
T N X DKH_L L IF XKH_L P XKH_R DKH_L ID ASSIGN E 
T N X DKH_L L IF XKH_L P XKH_R DKH_L ID ASSIGN E SEMICOLON 
B->ID ASSIGN E SEMICOLON 
T N X DKH_L L IF XKH_L P XKH_R DKH_L B 
Z->B 
T N X DKH_L L IF XKH_L P XKH_R DKH_L Z 
Y->Z 
T N X DKH_L L IF XKH_L P XKH_R DKH_L Y 
L->Y 
T N X DKH_L L IF XKH_L P XKH_R DKH_L L 
T N X DKH_L L IF XKH_L P XKH_R DKH_L L DKH_R 
A->DKH_L L DKH_R 
T N X DKH_L L IF XKH_L P XKH_R A 
J->IF XKH_L P XKH_R A 
T N X DKH_L L J 
T N X DKH_L L J ELSE 
T N X DKH_L L J ELSE DKH_L 
T N X DKH_L L J ELSE DKH_L ID 
T N X DKH_L L J ELSE DKH_L ID ASSIGN 
T N X DKH_L L J ELSE DKH_L ID ASSIGN BOOL_VALUE 
C->BOOL_VALUE 
T N X DKH_L L J ELSE DKH_L ID ASSIGN C 
V->C 
T N X DKH_L L J ELSE DKH_L ID ASSIGN V 
E->V 
T N X DKH_L L J ELSE DKH_L ID ASSIGN E 
T N X DKH_L L J ELSE DKH_L ID ASSIGN E SEMICOLON 
B->ID ASSIGN E SEMICOLON 
T N X DKH_L L J ELSE DKH_L B 
Z->B 
T N X DKH_L L J ELSE DKH_L Z 
Y->Z 
T N X DKH_L L J ELSE DKH_L Y 
L->Y 
T N X DKH_L L J ELSE DKH_L L 
T N X DKH_L L J ELSE DKH_L L DKH_R 
A->DKH_L L DKH_R 
T N X DKH_L L J ELSE A 
K->J ELSE A 
T N X DKH_L L K 
I->K 
T N X DKH_L L I 
Y->I 
T N X DKH_L L Y 
L->L Y 
T N X DKH_L L 
T N X DKH_L L FLOAT 
T->FLOAT 
T N X DKH_L L T 
T N X DKH_L L T ID 
T N X DKH_L L T ID ASSIGN 
T N X DKH_L L T ID ASSIGN INT_VALUE 
C->INT_VALUE 
T N X DKH_L L T ID ASSIGN C 
V->C 
T N X DKH_L L T ID ASSIGN V 
E->V 
T N X DKH_L L T ID ASSIGN E 
T N X DKH_L L T ID ASSIGN E SEMICOLON 
B->ID ASSIGN E SEMICOLON 
T N X DKH_L L T B 
Z->T B 
T N X DKH_L L Z 
Y->Z 
T N X DKH_L L Y 
L->L Y 
T N X DKH_L L 
T N X DKH_L L WHILE 
T N X DKH_L L WHILE XKH_L 
T N X DKH_L L WHILE XKH_L ID 
V->ID 
T N X DKH_L L WHILE XKH_L V 
T N X DKH_L L WHILE XKH_L V LESS 
Q->LESS 
T N X DKH_L L WHILE XKH_L V Q 
T N X DKH_L L WHILE XKH_L V Q INT_VALUE 
C->INT_VALUE 
T N X DKH_L L WHILE XKH_L V Q C 
V->C 
T N X DKH_L L WHILE XKH_L V Q V 
P->V Q V 
T N X DKH_L L WHILE XKH_L P 
T N X DKH_L L WHILE XKH_L P XKH_R 
T N X DKH_L L WHILE XKH_L P XKH_R DKH_L 
T N X DKH_L L WHILE XKH_L P XKH_R DKH_L ID 
T N X DKH_L L WHILE XKH_L P XKH_R DKH_L ID ASSIGN 
T N X DKH_L L WHILE XKH_L P XKH_R DKH_L ID ASSIGN ID 
V->ID 
T N X DKH_L L WHILE XKH_L P XKH_R DKH_L ID ASSIGN V 
E->V 
T N X DKH_L L WHILE XKH_L P XKH_R DKH_L ID ASSIGN E 
T N X DKH_L L WHILE XKH_L P XKH_R DKH_L ID ASSIGN E ADD 
G->ADD 
T N X DKH_L L WHILE XKH_L P XKH_R DKH_L ID ASSIGN E G 
T N X DKH_L L WHILE XKH_L P XKH_R DKH_L ID ASSIGN E G INT_VALUE 
C->INT_VALUE 
T N X DKH_L L WHILE XKH_L P XKH_R DKH_L ID ASSIGN E G C 
V->C 
T N X DKH_L L WHILE XKH_L P XKH_R DKH_L ID ASSIGN E G V 
E->V 
T N X DKH_L L WHILE XKH_L P XKH_R DKH_L ID ASSIGN E G E 
E->E G E 
T N X DKH_L L WHILE XKH_L P XKH_R DKH_L ID ASSIGN E 
T N X DKH_L L WHILE XKH_L P XKH_R DKH_L ID ASSIGN E SEMICOLON 
B->ID ASSIGN E SEMICOLON 
T N X DKH_L L WHILE XKH_L P XKH_R DKH_L B 
Z->B 
T N X DKH_L L WHILE XKH_L P XKH_R DKH_L Z 
Y->Z 
T N X DKH_L L WHILE XKH_L P XKH_R DKH_L Y 
L->Y 
T N X DKH_L L WHILE XKH_L P XKH_R DKH_L L 
T N X DKH_L L WHILE XKH_L P XKH_R DKH_L L DKH_R 
A->DKH_L L DKH_R 
T N X DKH_L L WHILE XKH_L P XKH_R A 
W->WHILE XKH_L P XKH_R A 
T N X DKH_L L W 
Y->W 
T N X DKH_L L Y 
L->L Y 
T N X DKH_L L 
T N X DKH_L L RETURN 
T N X DKH_L L RETURN INT_VALUE 
C->INT_VALUE 
T N X DKH_L L RETURN C 
V->C 
T N X DKH_L L RETURN V 
T N X DKH_L L RETURN V SEMICOLON 
R->RETURN V SEMICOLON 
T N X DKH_L L R 
Y->R 
T N X DKH_L L Y 
L->L Y 
T N X DKH_L L 
T N X DKH_L L DKH_R 
A->DKH_L L DKH_R 
T N X A 
F->T N X A 
F 
O->F 
O 
S->O 
S 
OK
